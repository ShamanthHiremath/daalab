alg quicksort(arr[a1...an])

pivot = arr[0]
left <- {}
right <- {}
for all i belonging to arr[a2 ... an]
    if i < pivot 
        then add i to left 
    else add i to right 
quicksort(left)
quicksort(right)
return left + {pivot} + right 

________________________________

alg dijkstras(graph, src, dst)

explored <- {} // set of explored vertices
d <- {v1: inf, v2: inf ...}
d(src) <- 0 
parent = {v1: -1, ...}
parent(src) <- src 

while explored != V 
do 
    select vertex v not belonging to explored and having least di 
    for all vertex u adjacent to v:
    do 
        if d(u) > d(v) + l(u, v)
        then 
            parent(u) <- v 
            d(u) <- d(v) + l(u, v)
    end for
    add v to explored 
   
end while 
path(parent)

alg path(parent[v1...vn], v)
if parent[v] == v then
    add v to path 
    return 
if parent[v] == -1 then return 
path(parent, parent[v])
add v to path
return 
        
________________________________

algo kruskal 

sort edges in ascending order of weigts
mst_edges <- {} 
mst_cost <- 0 

for edge in edges 
do 
    if adding edge to mst_edges does not form cycle
    then    
        add edge to mst_edges
        add |edge| to mst_cost 
return (mst_cost, mst_edges)

________________________________

algo weigtedinterval(jobs)

sort jobs in ascending order of finish time
dp <- [0 ... 0]
dp[1]  = jobs[1].profit

for i <- 2 to N 
do 
    dp[i] = max( jobs[i].profit + dp[opt(i)] , dp[i-1] )

return dp[N]

algo opt(j)

low <- 0 
hight <- j-1 
while low <= high do 
    mid = low+high // 2 
    if jobs[mid].endtime > jobs[j].starttime then 
        high = mid - 1 
    else 
        if jobs[mid+1].endtime <= jobs[j].starttime then
            low = mid+1 
        else
            return mid 
        end if 
    end if 
end while 
return -1 

________________________________

algo subsetsum(array, target)

for i <- 1 to N do
    for j<- 1 to target do 
        if array[i] <= j then 
            dp[i][j] = max( dp[i-1][j] , array[i] + dp[i-1][j - array[i]] )
        else 
            dp[i][j] = dp[i-1][j]
        end if 
    end for 
end for 

return dp[N][target]

________________________________

algo knapsack(items, capacity)

for i <- 1 to N do
    for j<- 1 to capacity do 
        if items[i].weight <= j then 
            dp[i][j] = max( dp[i-1][j] , items[i].weight + dp[i-1][j - items[i].weight] )
        else 
            dp[i][j] = dp[i-1][j]
        end if 
    end for 
end for 

return dp[N][capacity]
    